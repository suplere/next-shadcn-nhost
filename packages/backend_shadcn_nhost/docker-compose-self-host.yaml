version: '3.8'
services:
  traefik:
    image: "traefik:v2.8"
    container_name: "traefik"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:1337"
      - "--entryPoints.admin.address=:3030"
    ports:
      # hasura/services
      - "1337:1337"
      # traefik interface
      - "9090:8080"
      # dashboard
      - "3030:3030"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
  gitinit:
    image: "alpine/git"
    #entrypoint: /bin/sh
    entrypoint: "/bin/sh -c"
    #environment:
      #GIT_REPOSITORY: https://${GIT_USERNAME}:${GIT_PASSWORD}@${GIT_REPO}
    command: [
      "git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@${GIT_REPO} /usr/repo && cp -a /usr/repo${GIT_NHOST_FOLDER}/* /usr/share/nhostrepo && cp -a /usr/repo${GIT_NHOST_FOLDER}/nhost/emails/* /usr/share/nhostemails"
    ]
    labels:
      - "traefik.enable=false"
    volumes:
      - type: volume
        source: git-project-data
        target: /usr/share/nhostrepo
      - type: volume
        source: git-email-templates
        target: /usr/share/nhostemails
  functions:
    image: nhost/functions:1.0.0
    depends_on:
      gitinit:
        condition: service_completed_successfully
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.strip-functions.stripprefix.prefixes=/v1/functions"
      - "traefik.http.routers.functions.rule=Host(`${PROXY_HOST}`, `localhost`) && PathPrefix(`/v1/functions`)"
      - "traefik.http.routers.functions.middlewares=strip-functions@docker"
      - "traefik.http.routers.functions.entrypoints=web"
    restart: always
    environment:
      GRAPHITE_WEBHOOK_SECRET: ""
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}
      HASURA_GRAPHQL_GRAPHQL_URL: http://graphql:8080/v1/graphql
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      NHOST_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      NHOST_AUTH_URL: ${NEXT_PUBLIC_NHOST_AUTH_URL}
      NHOST_FUNCTIONS_URL: ${NEXT_PUBLIC_NHOST_FUNCTIONS_URL}
      NHOST_GRAPHQL_URL: ${NEXT_PUBLIC_NHOST_GRAPHQL_URL}
      NHOST_HASURA_URL: ${NEXT_PUBLIC_NHOST_HASURA_API_URL}
      NHOST_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      NHOST_REGION: ""
      NHOST_STORAGE_URL: ${NEXT_PUBLIC_NHOST_STORAGE_URL}
      NHOST_SUBDOMAIN: ""
      NHOST_WEBHOOK_SECRET: ${NHOST_WEBHOOK_SECRET}
    expose:
      - 3000
    volumes:
      - type: volume
        source: git-project-data
        target: /opt/project
      - type: volume
        source: main-root_node_modules
        target: /opt/project/node_modules
      - type: volume
        source: main-functions_node_modules
        target: /opt/project/functions/node_modules
  graphql-engine:
    image: nhost/graphql-engine:v2.33.4-ce
    restart: always
    expose:
      - 8080
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: public
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ADMIN_INTERNAL_ERRORS: "true"
      HASURA_GRAPHQL_CONSOLE_ASSETS_DIR: /srv/console-assets
      HASURA_GRAPHQL_CORS_DOMAIN: '*'
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_DISABLE_CORS: "false"
      HASURA_GRAPHQL_ENABLE_ALLOWLIST: "false"
      HASURA_GRAPHQL_ENABLE_REMOTE_SCHEMA_PERMISSIONS: "false"
      HASURA_GRAPHQL_ENABLE_TELEMETRY: "false"
      HASURA_GRAPHQL_ENABLED_APIS: metadata,graphql,pgdump,config
      HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup,http-log,webhook-log,websocket-log
      HASURA_GRAPHQL_EVENTS_HTTP_POOL_SIZE: "100"
      HASURA_GRAPHQL_LIVE_QUERIES_MULTIPLEXED_BATCH_SIZE: "100"
      HASURA_GRAPHQL_LIVE_QUERIES_MULTIPLEXED_REFETCH_INTERVAL: "1000"
      HASURA_GRAPHQL_LOG_LEVEL: warn
      HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES: "false"
      HASURA_GRAPHQL_WS_READ_COOKIE: "false"
      NHOST_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      NHOST_AUTH_URL: ${NEXT_PUBLIC_NHOST_AUTH_URL}
      NHOST_FUNCTIONS_URL: ${NEXT_PUBLIC_NHOST_FUNCTIONS_URL}
      NHOST_GRAPHQL_URL: ${NEXT_PUBLIC_NHOST_GRAPHQL_URL}
      NHOST_HASURA_URL: ${NEXT_PUBLIC_NHOST_HASURA_API_URL}
      NHOST_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      NHOST_REGION: ""
      NHOST_STORAGE_URL: ${NEXT_PUBLIC_NHOST_STORAGE_URL}
      NHOST_SUBDOMAIN: ""
      NHOST_WEBHOOK_SECRET: ${NHOST_WEBHOOK_SECRET}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.hasura.rule=Host(`${PROXY_HOST}`, `localhost`) && PathPrefix(`/`)"
      - "traefik.http.routers.hasura.entrypoints=web"
  storage:
    image: nhost/hasura-storage:0.6.0
    depends_on:
      graphql-engine:
        condition: service_healthy
    restart: always
    expose:
      - 8000
    environment:
      #BIND: :5000
      PUBLIC_URL: ${PROXY_URL}
      HASURA_METADATA: 1
      HASURA_ENDPOINT: http://graphql-engine:8080/v1
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      S3_ACCESS_KEY: ${STORAGE_ACCESS_KEY}
      S3_SECRET_KEY: ${STORAGE_SECRET_KEY}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_REGION: ${S3_REGION}
      S3_ROOT_FOLDER: ""
      S3_BUCKET: ${S3_BUCKET}
      POSTGRES_MIGRATIONS: 1
      POSTGRES_MIGRATIONS_SOURCE: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}?sslmode=disable
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.storage.rule=Host(`${PROXY_HOST}`, `localhost`) && PathPrefix(`/v1/storage`)"
      - "traefik.http.routers.storage.entrypoints=web"
      # Rewrite the path so it matches with the new storage API path introduced in hasura-storage 0.2
      - "traefik.http.middlewares.strip-suffix.replacepathregex.regex=^/v1/storage/(.*)"
      - "traefik.http.middlewares.strip-suffix.replacepathregex.replacement=/v1/$$1"
      - "traefik.http.routers.storage.middlewares=strip-suffix@docker"
    command: serve
  auth:
    image: nhost/hasura-auth:0.24.1
    depends_on:
      graphql-engine:
        condition: service_healthy
      gitinit:
        condition: service_completed_successfully
    restart: always
    volumes:
      - git-email-templates:/app/email-templates
    environment:
      AUTH_HOST: '0.0.0.0'
      HASURA_GRAPHQL_DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}
      HASURA_GRAPHQL_GRAPHQL_URL: http://graphql-engine:8080/v1/graphql
      HASURA_GRAPHQL_JWT_SECRET: ${HASURA_GRAPHQL_JWT_SECRET}
      HASURA_GRAPHQL_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
      AUTH_CLIENT_URL: ${AUTH_CLIENT_URL}
      AUTH_SMTP_HOST: ${AUTH_SMTP_HOST}
      AUTH_SMTP_PORT: ${AUTH_SMTP_PORT}
      AUTH_SMTP_USER: ${AUTH_SMTP_USER}
      AUTH_SMTP_PASS: ${AUTH_SMTP_PASS}
      AUTH_SMTP_SENDER: ${AUTH_SMTP_SENDER}
      AUTH_SMTP_AUTH_METHOD: LOGIN
      AUTH_SMTP_SECURE: ${AUTH_SMTP_SECURE}
      AUTH_ACCESS_CONTROL_ALLOWED_EMAIL_DOMAINS: ""
      AUTH_ACCESS_CONTROL_ALLOWED_EMAILS: ""
      AUTH_ACCESS_CONTROL_ALLOWED_REDIRECT_URLS: ${AUTH_ACCESS_CONTROL_ALLOWED_REDIRECT_URLS}
      AUTH_ACCESS_CONTROL_BLOCKED_EMAIL_DOMAINS: ""
      AUTH_ACCESS_CONTROL_BLOCKED_EMAILS: ""
      AUTH_ACCESS_TOKEN_EXPIRES_IN: "900"
      AUTH_ANONYMOUS_USERS_ENABLED: "false"
      #AUTH_API_PREFIX: /v1
      AUTH_DISABLE_NEW_USERS: "false"
      AUTH_DISABLE_SIGNUP: "false"
      AUTH_EMAIL_PASSWORDLESS_ENABLED: "false"
      AUTH_EMAIL_SIGNIN_EMAIL_VERIFIED_REQUIRED: "true"
      AUTH_GRAVATAR_DEFAULT: mp
      AUTH_GRAVATAR_ENABLED: "true"
      AUTH_GRAVATAR_RATING: g
      AUTH_JWT_CUSTOM_CLAIMS: '{}'
      AUTH_LOCALE_ALLOWED_LOCALES: en,cs
      AUTH_LOCALE_DEFAULT: cs
      AUTH_MFA_ENABLED: "false"
      AUTH_MFA_TOTP_ISSUER: ""
      AUTH_PASSWORD_HIBP_ENABLED: "false"
      AUTH_PASSWORD_MIN_LENGTH: "9"
      AUTH_PORT: "4000"
      AUTH_REFRESH_TOKEN_EXPIRES_IN: "43200"
      AUTH_SERVER_URL: ${NEXT_PUBLIC_NHOST_AUTH_URL}
      AUTH_USER_DEFAULT_ALLOWED_ROLES: user,me
      AUTH_USER_DEFAULT_ROLE: user

    expose:
      - 4000
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.strip-auth.stripprefix.prefixes=/v1/auth"
      - "traefik.http.routers.auth.rule=Host(`${PROXY_HOST}`, `localhost`) && PathPrefix(`/v1/auth`)"
      - "traefik.http.routers.auth.middlewares=strip-auth@docker"
      - "traefik.http.routers.auth.entrypoints=web"
  dashboard:
    image: nhost/dashboard:0.21.1
    #image: nhost/dashboard:1.6.3
    environment:
      NEXT_PUBLIC_NHOST_HASURA_MIGRATIONS_API_URL: ${NEXT_PUBLIC_NHOST_HASURA_MIGRATIONS_API_URL}
      NEXT_PUBLIC_NHOST_HASURA_CONSOLE_URL: ${NEXT_PUBLIC_NHOST_HASURA_CONSOLE_URL}
      NEXT_PUBLIC_NHOST_HASURA_API_URL: ${NEXT_PUBLIC_NHOST_HASURA_API_URL}
      NEXT_PUBLIC_NHOST_AUTH_URL: ${NEXT_PUBLIC_NHOST_AUTH_URL}
      NEXT_PUBLIC_NHOST_GRAPHQL_URL: ${NEXT_PUBLIC_NHOST_GRAPHQL_URL}
      NEXT_PUBLIC_NHOST_STORAGE_URL: ${NEXT_PUBLIC_NHOST_STORAGE_URL}
      NEXT_PUBLIC_NHOST_FUNCTIONS_URL: ${NEXT_PUBLIC_NHOST_FUNCTIONS_URL}
      NEXT_PUBLIC_NHOST_ADMIN_SECRET: ${HASURA_GRAPHQL_ADMIN_SECRET}
    expose:
     - 3000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nhost.rule=Host(`${NHOST_HOST}`)"
      - "traefik.http.routers.nhost.entrypoints=admin"
      # If you would like to protect your dashboard with a username and password if it is publicly-facing, uncomment and fill in the following lines below according to the documentation at https://doc.traefik.io/traefik/middlewares/http/basicauth/
      - "traefik.http.routers.nhost.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${DASHBOARD_BASIC_AUTH}"
volumes:
  git-project-data: {}
  git-email-templates: {}
  main-functions_node_modules: {}
  main-root_node_modules: {}
